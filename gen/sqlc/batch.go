// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: batch.go

package sqlc

import (
	"context"
	"errors"

	"github.com/google/uuid"
	null "github.com/guregu/null/v5"
	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const upsertTags = `-- name: UpsertTags :batchone
INSERT INTO tags (id, name, color) VALUES ($1, $2, $3) ON CONFLICT (name) DO UPDATE SET name = EXCLUDED.name RETURNING id
`

type UpsertTagsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpsertTagsParams struct {
	Id    uuid.UUID
	Name  string
	Color null.String
}

func (q *Queries) UpsertTags(ctx context.Context, arg []UpsertTagsParams) *UpsertTagsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Id,
			a.Name,
			a.Color,
		}
		batch.Queue(upsertTags, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpsertTagsBatchResults{br, len(arg), false}
}

func (b *UpsertTagsBatchResults) QueryRow(f func(int, uuid.UUID, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var id uuid.UUID
		if b.closed {
			if f != nil {
				f(t, id, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(&id)
		if f != nil {
			f(t, id, err)
		}
	}
}

func (b *UpsertTagsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
