// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: proxy_block.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	null "github.com/guregu/null/v5"
)

const createProxyBlock = `-- name: CreateProxyBlock :exec
INSERT INTO proxy_blocks (id, name, description) VALUES ($1, $2, $3)
`

type CreateProxyBlockParams struct {
	Id          uuid.UUID
	Name        string
	Description string
}

func (q *Queries) CreateProxyBlock(ctx context.Context, arg CreateProxyBlockParams) error {
	_, err := q.db.Exec(ctx, createProxyBlock, arg.Id, arg.Name, arg.Description)
	return err
}

type CreateProxyBlockTagParams struct {
	ProxyBlockId uuid.UUID
	TagId        uuid.UUID
}

const deleteProxyBlock = `-- name: DeleteProxyBlock :one
DELETE FROM proxy_blocks WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteProxyBlock(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteProxyBlock, id)
	err := row.Scan(&id)
	return id, err
}

const deleteProxyBlockTags = `-- name: DeleteProxyBlockTags :exec
DELETE FROM proxy_block_tag WHERE proxy_block_id = $1
`

func (q *Queries) DeleteProxyBlockTags(ctx context.Context, proxyBlockID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProxyBlockTags, proxyBlockID)
	return err
}

const getProxiesByProxyBlockId = `-- name: GetProxiesByProxyBlockId :many
SELECT proxies.id, proxies.name, proxies.description, proxies.schema, proxies.host, proxies.port, proxies.username, proxies.password
FROM proxies
JOIN proxy_tag ON proxies.id = proxy_tag.proxy_id
JOIN proxy_block_tag ON proxy_tag.tag_id = proxy_block_tag.tag_id
WHERE proxy_block_tag.proxy_block_id = $1
GROUP BY proxies.id, proxies.name, proxies.description, proxies.host, proxies.port, proxies.username, proxies.password
HAVING count(proxies.id) = $2::integer
`

type GetProxiesByProxyBlockIdParams struct {
	ProxyBlockId uuid.UUID
	Column2      int32
}

func (q *Queries) GetProxiesByProxyBlockId(ctx context.Context, arg GetProxiesByProxyBlockIdParams) ([]Proxy, error) {
	rows, err := q.db.Query(ctx, getProxiesByProxyBlockId, arg.ProxyBlockId, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Proxy
	for rows.Next() {
		var i Proxy
		if err := rows.Scan(
			&i.Id,
			&i.Name,
			&i.Description,
			&i.Schema,
			&i.Host,
			&i.Port,
			&i.Username,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProxyBlockTagsCount = `-- name: GetProxyBlockTagsCount :one
SELECT count(tag_id) FROM proxy_block_tag WHERE proxy_block_id = $1
`

func (q *Queries) GetProxyBlockTagsCount(ctx context.Context, proxyBlockID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getProxyBlockTagsCount, proxyBlockID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProxyBlockWithTags = `-- name: GetProxyBlockWithTags :many
SELECT proxy_blocks.id, proxy_blocks.name, proxy_blocks.description, tags.id, tags.name, tags.color FROM proxy_blocks
LEFT JOIN proxy_block_tag ON proxy_blocks.id=proxy_block_tag.proxy_block_id
LEFT JOIN tags ON tags.id=proxy_block_tag.tag_id
WHERE proxy_blocks.id = $1
`

type GetProxyBlockWithTagsRow struct {
	ProxyBlock ProxyBlock
	Id         *uuid.UUID
	Name       null.String
	Color      null.String
}

func (q *Queries) GetProxyBlockWithTags(ctx context.Context, id uuid.UUID) ([]GetProxyBlockWithTagsRow, error) {
	rows, err := q.db.Query(ctx, getProxyBlockWithTags, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProxyBlockWithTagsRow
	for rows.Next() {
		var i GetProxyBlockWithTagsRow
		if err := rows.Scan(
			&i.ProxyBlock.Id,
			&i.ProxyBlock.Name,
			&i.ProxyBlock.Description,
			&i.Id,
			&i.Name,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectProxyBlockForNoKeyUpdate = `-- name: SelectProxyBlockForNoKeyUpdate :one
SELECT id FROM proxy_blocks WHERE id = $1 FOR NO KEY UPDATE
`

func (q *Queries) SelectProxyBlockForNoKeyUpdate(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, selectProxyBlockForNoKeyUpdate, id)
	err := row.Scan(&id)
	return id, err
}

const updateProxyBlock = `-- name: UpdateProxyBlock :exec
UPDATE proxy_blocks SET
    name=coalesce($2, name),
    description=coalesce($3, description)
WHERE id = $1
`

type UpdateProxyBlockParams struct {
	Id          uuid.UUID
	Name        null.String
	Description null.String
}

func (q *Queries) UpdateProxyBlock(ctx context.Context, arg UpdateProxyBlockParams) error {
	_, err := q.db.Exec(ctx, updateProxyBlock, arg.Id, arg.Name, arg.Description)
	return err
}
