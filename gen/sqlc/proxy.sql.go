// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: proxy.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	null "github.com/guregu/null/v5"
)

const createProxy = `-- name: CreateProxy :exec
INSERT INTO proxies (id, name, description, schema, host, port, username, password) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateProxyParams struct {
	Id          uuid.UUID
	Name        string
	Description string
	Schema      string
	Host        string
	Port        int32
	Username    null.String
	Password    null.String
}

func (q *Queries) CreateProxy(ctx context.Context, arg CreateProxyParams) error {
	_, err := q.db.Exec(ctx, createProxy,
		arg.Id,
		arg.Name,
		arg.Description,
		arg.Schema,
		arg.Host,
		arg.Port,
		arg.Username,
		arg.Password,
	)
	return err
}

type CreateProxyTagParams struct {
	ProxyId uuid.UUID
	TagId   uuid.UUID
}

const deleteProxy = `-- name: DeleteProxy :one
DELETE FROM proxies WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteProxy(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteProxy, id)
	err := row.Scan(&id)
	return id, err
}

const deleteProxyTags = `-- name: DeleteProxyTags :exec
DELETE FROM proxy_tag WHERE proxy_id = $1
`

func (q *Queries) DeleteProxyTags(ctx context.Context, proxyID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProxyTags, proxyID)
	return err
}

const getProxyWithTags = `-- name: GetProxyWithTags :many
SELECT proxies.id, proxies.name, proxies.description, proxies.schema, proxies.host, proxies.port, proxies.username, proxies.password, tags.id, tags.name, tags.color FROM proxies
LEFT JOIN proxy_tag ON proxies.id = proxy_tag.proxy_id
LEFT JOIN tags ON tags.id = proxy_tag.tag_id
WHERE proxies.id = $1
`

type GetProxyWithTagsRow struct {
	Proxy Proxy
	Id    *uuid.UUID
	Name  null.String
	Color null.String
}

func (q *Queries) GetProxyWithTags(ctx context.Context, id uuid.UUID) ([]GetProxyWithTagsRow, error) {
	rows, err := q.db.Query(ctx, getProxyWithTags, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProxyWithTagsRow
	for rows.Next() {
		var i GetProxyWithTagsRow
		if err := rows.Scan(
			&i.Proxy.Id,
			&i.Proxy.Name,
			&i.Proxy.Description,
			&i.Proxy.Schema,
			&i.Proxy.Host,
			&i.Proxy.Port,
			&i.Proxy.Username,
			&i.Proxy.Password,
			&i.Id,
			&i.Name,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectProxyForNoKeyUpdate = `-- name: SelectProxyForNoKeyUpdate :one
SELECT id FROM proxies WHERE id = $1 FOR NO KEY UPDATE
`

func (q *Queries) SelectProxyForNoKeyUpdate(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, selectProxyForNoKeyUpdate, id)
	err := row.Scan(&id)
	return id, err
}

const updateProxy = `-- name: UpdateProxy :exec
UPDATE proxies SET
    name=coalesce($2, name),
    description=coalesce($3, description),
    schema=coalesce($4, schema),
    host=coalesce($5, host),
    port=coalesce($6, port),
    username=coalesce($7, username),
    password=coalesce($8, password)
WHERE id = $1
`

type UpdateProxyParams struct {
	Id          uuid.UUID
	Name        null.String
	Description null.String
	Schema      null.String
	Host        null.String
	Port        null.Int32
	Username    null.String
	Password    null.String
}

func (q *Queries) UpdateProxy(ctx context.Context, arg UpdateProxyParams) error {
	_, err := q.db.Exec(ctx, updateProxy,
		arg.Id,
		arg.Name,
		arg.Description,
		arg.Schema,
		arg.Host,
		arg.Port,
		arg.Username,
		arg.Password,
	)
	return err
}
